# -*- coding: utf-8 -*-

import Sofa
import os
path = os.path.dirname(os.path.abspath(__file__))+'/../mesh/'

from stlib3.scene import Scene
# A prefab that implements an ElasticMaterialObject
from stlib3.physics.deformable import ElasticMaterialObject
from stlib3.visuals import VisualModel
from FingerController import FingerController

def createScene(rootNode):
	rootNode.addObject("RequiredPlugin", pluginName=["SoftRobots",'SofaConstraint','SofaEngine','SofaLoader','SofaDeformable'])
	scene = Scene(rootNode, gravity=[0.0,-9810.0,0.0], dt=0.01)

	rootNode.addObject("FreeMotionAnimationLoop")
	rootNode.addObject("GenericConstraintSolver", maxIterations=1000, tolerance=0.001)

	finger = ElasticMaterialObject(name="finger",
			                        volumeMeshFileName="finger.msh",
			                        poissonRatio=0.45,
			                        youngModulus=600,
			                        totalMass=0.05)
	rootNode.addChild(finger)

	# To facilitate the selection of DoFs, SOFA has a concept called ROI (Region of Interest).
	# The idea is that ROI component "select" all DoFS that are enclosed by their "region".
	# We use ROI here to select a group of finger's DoFs that will be constrained to stay
	# at a fixed position.
	# You can either use "BoxROI"...
	finger.addObject('BoxROI', name='ROI1', box=[-15, 0, 0, 5, 10, 15], drawBoxes=True)
	# Or "SphereROI"...
	#finger.addObject('SphereROI', name='ROI', centers='0 0 0', radii='5')

	# RestShapeSpringsForceField is one way in Sofa to implement fixed point constraint.
	# Here the constraints are applied to the DoFs selected by the previously defined BoxROI
	finger.addObject('RestShapeSpringsForceField', points='@ROI1.indices', stiffness=1e12)


	##########################################
	# Cable                                  #
	##########################################

	#  This add a new node in the scene. This node is appended to the finger's node.
	cable = finger.addChild('cable')

	# This add a MechanicalObject, a componant holding the degree of freedom of our
	# mechanical modelling. In the case of a cable it is a set of positions specifying
	# the points where the cable is passing by.
	cable.addObject('MechanicalObject',
			position=[
			[-17.5, 12.5, 2.5],
			[-32.5, 12.5, 2.5],
			[-47.5, 12.5, 2.5],
			[-62.5, 12.5, 2.5],
			[-77.5, 12.5, 2.5],

			[-83.5, 12.5, 4.5],
			[-85.5, 12.5, 6.5],
			[-85.5, 12.5, 8.5],
			[-83.5, 12.5, 10.5],

			[-77.5, 12.5, 12.5],
			[-62.5, 12.5, 12.5],
			[-47.5, 12.5, 12.5],
			[-32.5, 12.5, 12.5],
			[-17.5, 12.5, 12.5]])

	# add a CableConstraint object with a name.
	# the indices are referring to the MechanicalObject's positions.
	# The last indice is where the pullPoint is connected.
	cable.addObject('CableConstraint', name="aCableActuator",
			indices=list(range(0,14)),
			pullPoint=[0.0, 12.5, 2.5])

	# This add a BarycentricMapping. A BarycentricMapping is a key element as it will add a bi-directional link
	# between the cable's DoFs and the finger's ones so that movements of the cable's DoFs will be mapped
	# to the finger and vice-versa;
	cable.addObject('BarycentricMapping')

	# This add a PythonScriptController that permits to programatically implement new behavior
	# or interactions using the Python programming langage. The controller is referring to a
	# file named "controller.py".
	cable.addObject(FingerController(node=cable))

	##########################################
	# Visualization                          #
	##########################################
	# In Sofa, visualization is handled by adding a rendering model.
	finger.addChild(VisualModel(visualMeshPath=path+"finger.stl", color=[0.0, 0.7, 0.7]))
	finger.VisualModel.addObject('BarycentricMapping', name='mapping')

	return rootNode
