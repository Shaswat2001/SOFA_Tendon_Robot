import Sofa
from stlib3.scene import Scene
# A prefab that implements an ElasticMaterialObject
from stlib3.physics.deformable import ElasticMaterialObject
from stlib3.visuals import VisualModel
import math

from FingerController import FingerController

def createScene(rootNode):
    rootNode.addObject("RequiredPlugin", pluginName = ["SoftRobots",'SofaConstraint','SofaEngine','SofaLoader','SofaDeformable','SofaGeneralLoader','SofaSparseSolver','SofaImplicitOdeSolver','SofaMiscCollision','SofaSimpleFem','SofaMeshCollision'])
    scene = Scene(rootNode,dt=0.01,gravity=[0,9810,0])

    rootNode.addObject("FreeMotionAnimationLoop")
    rootNode.addObject("GenericConstraintSolver", maxIterations=1000, tolerance=0.001)
    rootNode.addObject("DefaultPipeline",verbose=0)
    rootNode.addObject("BruteForceDetection")
    rootNode.addObject("MinProximityIntersection", name="Proximity", alarmDistance=1.5, contactDistance=1)
    rootNode.addObject("DefaultContactManager",name="Response",response="default")
    rootNode.addObject("DefaultCollisionGroupManager",name="Group")
    rootNode.addObject("DiscreteIntersection")

    # Disk Physics Model
    TendonRobot = rootNode.addChild("TendonRobot")
    TendonRobot.addObject("EulerImplicitSolver")
    TendonRobot.addObject("SparseLDLSolver",name="solver")
    TendonRobot.addObject("MeshGmshLoader",name = "DiskLoader", filename = "Mesh/8Disk_4D.msh")
    TendonRobot.addObject("TetrahedronSetTopologyContainer",name="topo",src="@DiskLoader")
    TendonRobot.addObject('TetrahedronSetTopologyModifier')
    TendonRobot.addObject("TetrahedronSetGeometryAlgorithms",name="DiskAlgo",template="Vec3d")
    TendonRobot.addObject("MechanicalObject",name="DiskObj",template="Vec3d",showObject=1)
    TendonRobot.addObject("TetrahedronFEMForceField",name="FEM",youngModulus=1e8, poissonRatio=0.1,method="large")
    TendonRobot.addObject('UniformMass', totalMass=100, name='mass')
    TendonRobot.addObject('LinearSolverConstraintCorrection')

    # Collision Model

    TendonCollision = TendonRobot.addChild("TendonCollision")
    TendonCollision.addObject("MeshGmshLoader",name = "DiskCollLoader", filename = "Mesh/8Disk_4D.msh")
    TendonCollision.addObject("MeshTopology", src="@DiskCollLoader")
    TendonCollision.addObject("MechanicalObject", name="CollisionMO",scale="1.0")
    TendonCollision.addObject("TriangleCollisionModel", name="CollisionModel",contactStiffness="3")
    TendonCollision.addObject("BarycentricMapping", name="CollisionMapping", input="@../DiskObj", output="@CollisionMO")

    # Disk Interface Model

    TendonConnection = TendonRobot.addChild("TendonConnection")
    TendonConnection.addObject("MeshSTLLoader",filename='Mesh/8Disk_4D.stl', name='loader')
    TendonConnection.addObject("MeshTopology",position='@loader.position', triangles='@loader.triangles', name='mesh_TendonInterface')
    TendonConnection.addObject('MechanicalObject', name='pointCloud_Tendon', template='Vec3d',showObject=1)
    TendonConnection.addObject('BarycentricMapping')

    # BackBone Physics Model

    Spring = rootNode.addChild("Spring")
    Spring.addObject("EulerImplicitSolver")
    Spring.addObject("SparseLDLSolver",name="solver")
    Spring.addObject("MeshGmshLoader",name = "SpringLoader", filename = "Mesh/BackBone8Disk.msh")
    Spring.addObject("TetrahedronSetTopologyContainer",name="Springtopo",src="@SpringLoader")
    Spring.addObject("TetrahedronSetGeometryAlgorithms",name="SpringAlgo",template="Vec3d")
    Spring.addObject("MechanicalObject",name="SpringObj",template="Vec3d",showObject=1,translation=[0,0,0])
    Spring.addObject("TetrahedronFEMForceField",name="SFEM",youngModulus=1e6, poissonRatio=0.4,method="large")
    Spring.addObject('UniformMass', totalMass=100, name='mass')
    Spring.addObject('LinearSolverConstraintCorrection')

    SpringConnection = Spring.addChild('SpringConnection')
    SpringConnection.addObject('MeshSTLLoader', filename='Mesh/8Disk_4D.stl', name='loader')
    SpringConnection.addObject('MeshTopology', position='@loader.position', triangles='@loader.triangles')
    SpringConnection.addObject('MechanicalObject', name='pointCloud_Spring', template='Vec3d', showObject=1)
    SpringConnection.addObject('BarycentricMapping')
    
    id_pts=""
    #print(rootNode.getObject())
    for i in range(350):
       id_pts= id_pts+str(i)+" "
    rootNode.addObject(
        'BilateralInteractionConstraint', 
        name='BIC', 
        template='Vec3d', 
        object1='@TendonRobot/TendonConnection/pointCloud_Tendon', 
        object2='@Spring/SpringConnection/pointCloud_Spring', 
        first_point=id_pts, 
        second_point=id_pts
    )
    rootNode.addChild(TendonRobot)
    rootNode.addChild(Spring)

    TendonRobot.addObject('BoxROI', name='ROI1', box=[-30, 0, -30, 30, 4, 30], drawBoxes=True)
    TendonRobot.addObject('RestShapeSpringsForceField', points='@ROI1.indices', stiffness=1e12)

    cableAngle = 90
    noDisks = 8
    segLength = 324
    diskThickness = 4
    diskRadius = 20
    length = (segLength-noDisks*diskThickness)/(noDisks-1)
    cablePos = []
    for i in range(int(360/cableAngle)):
        cablePos.append([])
        for j in range(noDisks):
            cablePos[i].append([(diskRadius-3)*math.cos(math.radians(cableAngle/2+(i-1)*cableAngle)),diskThickness/2-1+j*(diskThickness+length),(diskRadius-3)*math.sin(math.radians(cableAngle/2+(i-1)*cableAngle))])
            cablePos[i].append([(diskRadius-3)*math.cos(math.radians(cableAngle/2+(i-1)*cableAngle)),diskThickness/2+1+j*(diskThickness+length),(diskRadius-3)*math.sin(math.radians(cableAngle/2+(i-1)*cableAngle))])


    for i in range(int(360/cableAngle)):
        cable = TendonRobot.addChild("cable"+str(i+1))
        cable.addObject("MechanicalObject",position=cablePos[i])
        cable.addObject("CableConstraint",name="aCableActuator",indices=list(range(len(cablePos[i]))),pullPoint=[cablePos[i][0][0],-12.5,cablePos[i][0][2]],maxForce=800,minForce=100)
        cable.addObject('BarycentricMapping',mapForces="false", mapMasses="false")
        if i==0:
            cable.addObject(FingerController(node=cable))

    return rootNode